name: Update Android Studio Spec File

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    # Runs at 4:00 AM UTC every day
    - cron: '0 4 * * *'

jobs:
  update-spec-file:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for pushing changes to the repository
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for authentication

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq # jq for potential future JSON use

      - name: Update spec file and commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SPEC_FILE="android-studio.spec"
          
          echo "Fetching the latest Android Studio version..."

          # Temporary debug: Save page content for inspection if needed
          curl -s https://developer.android.com/studio/releases > releases.html
          curl -s https://developer.android.com/studio > studio.html

          # Method 1: Scrape from releases page header (most reliable for latest stable)
          LATEST_VERSION=$(curl -s --retry 3 --retry-delay 5 https://developer.android.com/studio/releases \
            | grep -oP 'Android Studio \K(\d{4}\.\d+\.\d+)' \
            | head -1)

          # Method 2: Fallback to main studio page header
          if [ -z "$LATEST_VERSION" ]; then
            echo "Method 1 failed. Trying main page header..."
            LATEST_VERSION=$(curl -s --retry 3 --retry-delay 5 https://developer.android.com/studio \
              | grep -oP 'Android Studio \K(\d{4}\.\d+\.\d+)' \
              | head -1)
          fi

          # Method 3: Fallback to download filename pattern on main page (includes patch if available)
          if [ -z "$LATEST_VERSION" ]; then
            echo "Method 2 failed. Trying download filename..."
            LATEST_VERSION=$(curl -s --retry 3 --retry-delay 5 https://developer.android.com/studio \
              | grep -oP 'android-studio-\K\d{4}\.\d+\.\d+(?:\.\d+)?' \
              | sort -V | head -1 \
              | cut -d. -f1-3)  # Trim to major.minor.patch if extra patch present
          fi

          # Method 4: Broad fallback from releases page table or any mention
          if [ -z "$LATEST_VERSION" ]; then
            echo "Method 3 failed. Trying broad search on releases page..."
            LATEST_VERSION=$(curl -s --retry 3 --retry-delay 5 https://developer.android.com/studio/releases \
              | grep -oP '\d{4}\.\d+\.\d+' \
              | sort -V | tail -n1)
          fi

          # Clean up temp files
          rm -f releases.html studio.html

          if [ -z "$LATEST_VERSION" ]; then
            echo "ERROR: Failed to fetch the latest version from all sources."
            echo "Debug: Last 200 chars of releases page:"
            curl -s https://developer.android.com/studio/releases | tail -c 200
            exit 1
          fi

          echo "Latest available version: $LATEST_VERSION"

          # Validate version format (e.g., YYYY.M.N)
          if ! echo "$LATEST_VERSION" | grep -qE '^[0-9]{4}\.[0-9]+\.[0-9]+$'; then
            echo "ERROR: Invalid version format: $LATEST_VERSION"
            exit 1
          fi

          # Check if spec file exists
          if [ ! -f "$SPEC_FILE" ]; then
            echo "ERROR: Spec file not found: $SPEC_FILE"
            exit 1
          fi

          # Get current version from spec file (trim whitespace)
          CURRENT_VERSION=$(grep -i "^Version:" "$SPEC_FILE" | awk '{print $2}' | tr -d '[:space:]')
          echo "Current spec file version: $CURRENT_VERSION"

          # Compare versions
          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "Version is already up to date."
            exit 0
          fi

          echo "New version found. Updating spec file..."
          echo "Before update - Version line:"
          grep -i "^Version:" "$SPEC_FILE" | cat -A

          # Create backup
          cp "$SPEC_FILE" "${SPEC_FILE}.backup"

          # Update the spec file with the new version (fixed sed command)
          sed -i "s/^Version:.*/Version: $LATEST_VERSION/" "$SPEC_FILE"

          echo "After update - Version line:"
          grep -i "^Version:" "$SPEC_FILE" | cat -A

          # Verify the update with more robust parsing
          UPDATED_VERSION=$(grep -i "^Version:" "$SPEC_FILE" | sed 's/^[Vv]ersion:[[:space:]]*//' | tr -d '[:space:]')
          echo "Extracted updated version: '$UPDATED_VERSION'"
          echo "Expected version: '$LATEST_VERSION'"

          if [ "$UPDATED_VERSION" != "$LATEST_VERSION" ]; then
            echo "ERROR: Failed to update spec file correctly."
            echo "Full version line after update:"
            grep -i "^Version:" "$SPEC_FILE"
            # Restore backup
            mv "${SPEC_FILE}.backup" "$SPEC_FILE"
            exit 1
          fi

          # Remove backup on success
          rm -f "${SPEC_FILE}.backup"

          # Configure git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

          # Commit and push changes
          if ! git diff --quiet "$SPEC_FILE"; then
            echo "Committing and pushing changes..."
            git add "$SPEC_FILE"
            git commit -m "chore(version): Bump Android Studio to $LATEST_VERSION"
            git push
          else
            echo "WARNING: No changes detected in spec file despite version difference."
            echo "Git diff output:"
            git diff "$SPEC_FILE"
            exit 1
          fi
